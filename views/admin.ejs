<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Admin Dashboard</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background-color: #f5f7fa;
            color: #333;
        }

        .dashboard-container {
            display: flex;
            min-height: 100vh;
        }

        /* Sidebar Styles */
        .sidebar {
            width: 280px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            position: fixed;
            height: 100vh;
            overflow-y: auto;
            transition: all 0.3s ease;
            z-index: 1000;
        }

        .sidebar-header {
            padding: 2rem 1.5rem;
            border-bottom: 1px solid rgba(255, 255, 255, 0.1);
        }

        .sidebar-header h1 {
            font-size: 1.5rem;
            font-weight: 600;
            margin-bottom: 0.5rem;
        }

        .sidebar-header p {
            font-size: 0.9rem;
            opacity: 0.8;
        }

        .sidebar-nav {
            padding: 1rem 0;
        }

        .nav-item {
            display: block;
            padding: 1rem 1.5rem;
            color: white;
            text-decoration: none;
            transition: all 0.3s ease;
            border-left: 4px solid transparent;
            cursor: pointer;
        }

        .nav-item:hover, .nav-item.active {
            background-color: rgba(255, 255, 255, 0.1);
            border-left-color: #fff;
            transform: translateX(5px);
        }

        .nav-item i {
            margin-right: 0.75rem;
            width: 20px;
        }

        /* Main Content Styles */
        .main-content {
            flex: 1;
            margin-left: 280px;
            padding: 2rem;
            background-color: #f5f7fa;
            min-height: 100vh;
        }

        .content-header {
            background: white;
            padding: 1.5rem 2rem;
            border-radius: 12px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
            margin-bottom: 2rem;
        }

        .content-header h2 {
            font-size: 1.8rem;
            color: #333;
            margin-bottom: 0.5rem;
        }

        .content-header p {
            color: #666;
            font-size: 1rem;
        }

        .content-section {
            display: none;
            animation: fadeIn 0.3s ease-in;
        }

        .content-section.active {
            display: block;
        }

        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(10px); }
            to { opacity: 1; transform: translateY(0); }
        }

        /* Card Styles */
        .card {
            background: white;
            border-radius: 12px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
            padding: 1.5rem;
            margin-bottom: 1.5rem;
        }

        .card-header {
            margin-bottom: 1.5rem;
            padding-bottom: 1rem;
            border-bottom: 1px solid #eee;
        }

        .card-title {
            font-size: 1.2rem;
            font-weight: 600;
            color: #333;
        }

        /* Table Styles */
        .table-container {
            overflow-x: auto;
        }

        table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 1rem;
        }

        th, td {
            padding: 1rem;
            text-align: left;
            border-bottom: 1px solid #eee;
        }

        th {
            background-color: #f8f9fa;
            font-weight: 600;
            color: #555;
        }

        tr:hover {
            background-color: #f8f9fa;
        }

        /* Form Styles */
        .form-group {
            margin-bottom: 1.5rem;
        }

        .form-group label {
            display: block;
            margin-bottom: 0.5rem;
            font-weight: 500;
            color: #333;
        }

        .form-control {
            width: 100%;
            padding: 0.75rem;
            border: 1px solid #ddd;
            border-radius: 8px;
            font-size: 1rem;
            transition: border-color 0.3s ease;
        }

        .form-control:focus {
            outline: none;
            border-color: #667eea;
            box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
        }

        .form-row {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 1rem;
        }

        /* Button Styles */
        .btn {
            padding: 0.5rem 1rem;
            border: none;
            border-radius: 6px;
            cursor: pointer;
            font-size: 0.9rem;
            font-weight: 500;
            transition: all 0.3s ease;
            text-decoration: none;
            display: inline-block;
            text-align: center;
        }

        .btn-primary {
            background-color: #667eea;
            color: white;
        }

        .btn-primary:hover {
            background-color: #5a6fd8;
            transform: translateY(-2px);
        }

        .btn-success {
            background-color: #51cf66;
            color: white;
        }

        .btn-success:hover {
            background-color: #40c057;
        }

        .btn-danger {
            background-color: #ff6b6b;
            color: white;
        }

        .btn-danger:hover {
            background-color: #ff5252;
        }

        .btn-warning {
            background-color: #ffd43b;
            color: #333;
        }

        .btn-warning:hover {
            background-color: #ffcd02;
        }

        .btn-group {
            display: flex;
            gap: 0.5rem;
        }

        /* Stats Cards */
        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 1.5rem;
            margin-bottom: 2rem;
        }

        .stat-card {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 1.5rem;
            border-radius: 12px;
            text-align: center;
        }

        .stat-number {
            font-size: 2rem;
            font-weight: bold;
            margin-bottom: 0.5rem;
        }

        .stat-label {
            font-size: 0.9rem;
            opacity: 0.9;
        }

        /* Status badges */
        .status-badge {
            padding: 0.25rem 0.75rem;
            border-radius: 20px;
            font-size: 0.8rem;
            font-weight: 500;
        }

        .status-pending {
            background-color: #fff3cd;
            color: #856404;
        }

        .status-verified {
            background-color: #d4edda;
            color: #155724;
        }

        .status-rejected {
            background-color: #f8d7da;
            color: #721c24;
        }
        
        /* For installment dashboard*/
        .search-section {
            padding: 40px;
            background: #f8f9ff;
            border-bottom: 1px solid #e1e5f0;
        }

        .search-container {
            display: flex;
            gap: 15px;
            max-width: 600px;
            margin: 0 auto;
            margin-bottom: 25px;
        }

        .search-input {
            flex: 1;
            padding: 15px 20px;
            border: 2px solid #e1e5f0;
            border-radius: 12px;
            font-size: 16px;
            transition: all 0.3s ease;
            background: white;
        }

        .search-input:focus {
            outline: none;
            border-color: #4facfe;
            box-shadow: 0 0 0 3px rgba(79, 172, 254, 0.1);
            transform: translateY(-1px);
        }

        .search-btn {
            padding: 15px 30px;
            background: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);
            color: white;
            border: none;
            border-radius: 12px;
            cursor: pointer;
            font-size: 16px;
            font-weight: 600;
            transition: all 0.3s ease;
            box-shadow: 0 4px 15px rgba(79, 172, 254, 0.3);
        }

        .search-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(79, 172, 254, 0.4);
        }

        .filter-section {
            max-width: 600px;
            margin: 0 auto;
            display: none;
        }

        .filter-section.show {
            display: block;
        }

        .filter-container {
            background: white;
            border-radius: 12px;
            padding: 20px;
            box-shadow: 0 4px 15px rgba(0,0,0,0.08);
            border: 1px solid #e1e5f0;
        }

        .filter-header {
            display: flex;
            align-items: center;
            gap: 10px;
            margin-bottom: 15px;
            color: #4facfe;
            font-weight: 600;
        }

        .filter-options {
            display: flex;
            flex-wrap: wrap;
            gap: 10px;
        }

        .filter-chip {
            padding: 8px 16px;
            border: 2px solid #e1e5f0;
            border-radius: 20px;
            background: white;
            cursor: pointer;
            font-size: 14px;
            font-weight: 500;
            transition: all 0.3s ease;
            user-select: none;
        }

        .filter-chip:hover {
            border-color: #4facfe;
            transform: translateY(-1px);
        }

        .filter-chip.active {
            background: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);
            color: white;
            border-color: #4facfe;
        }

        .filter-stats {
            margin-top: 15px;
            padding-top: 15px;
            border-top: 1px solid #f0f0f0;
            font-size: 14px;
            color: #666;
        }

        .results-section {
            padding: 40px;
            min-height: 400px;
        }

        .loading {
            text-align: center;
            padding: 60px;
            color: #666;
        }

        .spinner {
            width: 40px;
            height: 40px;
            border: 4px solid #f3f3f3;
            border-top: 4px solid #4facfe;
            border-radius: 50%;
            animation: spin 1s linear infinite;
            margin: 0 auto 20px;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        .no-results {
            text-align: center;
            padding: 60px;
            color: #666;
        }

        .no-results i {
            font-size: 4em;
            color: #ddd;
            margin-bottom: 20px;
        }

        .user-group {
            margin-bottom: 40px;
            background: #f8f9ff;
            border-radius: 16px;
            padding: 25px;
            border: 1px solid #e1e5f0;
        }

        .user-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
            padding-bottom: 15px;
            border-bottom: 2px solid #e1e5f0;
        }

        .user-header h3 {
            color: #333;
            font-size: 1.4em;
            font-weight: 600;
        }

        .user-summary {
            display: flex;
            align-items: center;
            gap: 15px;
        }

        .progress-text {
            font-weight: 600;
            color: #4facfe;
        }

        .transactions-list {
            display: grid;
            gap: 20px;
        }

        .transaction-card {
            background: white;
            border-radius: 12px;
            padding: 20px;
            box-shadow: 0 4px 15px rgba(0,0,0,0.08);
            border: 1px solid #f0f0f0;
            transition: all 0.3s ease;
        }

        .transaction-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(0,0,0,0.12);
        }

        .transaction-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 15px;
            padding-bottom: 12px;
            border-bottom: 1px solid #f0f0f0;
        }

        .transaction-id {
            font-family: 'Courier New', monospace;
            background: #f8f9ff;
            padding: 6px 12px;
            border-radius: 8px;
            font-size: 14px;
            color: #4facfe;
            font-weight: 600;
        }

        .transaction-status,
        .status-badge {
            padding: 6px 16px;
            border-radius: 20px;
            font-size: 12px;
            font-weight: 600;
            text-transform: uppercase;
        }

        .status-pending {
            background: #fff3cd;
            color: #856404;
        }

        .status-verified,
        .status-confirmed {
            background: #d4edda;
            color: #155724;
        }

        .status-rejected {
            background: #f8d7da;
            color: #721c24;
        }

        .status-completed {
            background: #cce5ff;
            color: #0056b3;
        }

        .transaction-details {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 15px;
            margin-bottom: 20px;
        }

        .detail-item {
            display: flex;
            flex-direction: column;
            gap: 5px;
        }

        .detail-label {
            font-size: 12px;
            color: #666;
            text-transform: uppercase;
            font-weight: 600;
            letter-spacing: 0.5px;
        }

        .detail-value {
            font-size: 16px;
            color: #333;
            font-weight: 500;
        }

        .amount-paid {
            color: #28a745;
            font-weight: 700;
            font-size: 18px;
        }

        .amount-target {
            color: #666;
        }

        .progress-bar {
            width: 100%;
            height: 8px;
            background: #f0f0f0;
            border-radius: 4px;
            overflow: hidden;
            margin-top: 8px;
        }

        .progress-fill {
            height: 100%;
            background: linear-gradient(90deg, #4facfe, #00f2fe);
            border-radius: 4px;
            transition: width 0.3s ease;
        }

        .action-buttons {
            display: flex;
            gap: 12px;
            justify-content: flex-end;
            margin-top: 20px;
            padding-top: 20px;
            border-top: 1px solid #f0f0f0;
        }

        .btn {
            padding: 10px 20px;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            font-size: 14px;
            font-weight: 600;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .btn-verify {
            background: linear-gradient(135deg, #28a745, #20c997);
            color: white;
            box-shadow: 0 2px 10px rgba(40, 167, 69, 0.3);
        }

        .btn-verify:hover {
            transform: translateY(-1px);
            box-shadow: 0 4px 15px rgba(40, 167, 69, 0.4);
        }

        .btn-reject {
            background: linear-gradient(135deg, #dc3545, #e83e8c);
            color: white;
            box-shadow: 0 2px 10px rgba(220, 53, 69, 0.3);
        }

        .btn-reject:hover {
            transform: translateY(-1px);
            box-shadow: 0 4px 15px rgba(220, 53, 69, 0.4);
        }

        .btn:disabled {
            opacity: 0.6;
            cursor: not-allowed;
            transform: none !important;
        }

        .toast {
            position: fixed;
            top: 20px;
            right: 20px;
            padding: 15px 25px;
            border-radius: 8px;
            color: white;
            font-weight: 600;
            z-index: 1000;
            transform: translateX(400px);
            transition: transform 0.3s ease;
        }

        .toast.show {
            transform: translateX(0);
        }

        .toast.success {
            background: linear-gradient(135deg, #28a745, #20c997);
        }

        .toast.error {
            background: linear-gradient(135deg, #dc3545, #e83e8c);
        }

        .results-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 30px;
            padding-bottom: 20px;
            border-bottom: 2px solid #f0f0f0;
        }

        .results-info h2 {
            color: #333;
            margin-bottom: 5px;
        }

        .results-summary {
            color: #666;
            font-size: 14px;
        }

        .clear-filters {
            background: #f8f9ff;
            color: #4facfe;
            border: 2px solid #4facfe;
            padding: 8px 16px;
            border-radius: 20px;
            cursor: pointer;
            font-size: 14px;
            font-weight: 600;
            transition: all 0.3s ease;
        }

        .clear-filters:hover {
            background: #4facfe;
            color: white;
        }

        /* Responsive */
        @media (max-width: 768px) {
            .sidebar {
                width: 100%;
                transform: translateX(-100%);
            }

            .sidebar.mobile-open {
                transform: translateX(0);
            }

            .main-content {
                margin-left: 0;
                padding: 1rem;
            }

            .form-row {
                grid-template-columns: 1fr;
            }

            /* for installment dashboard*/
            .search-container {
                flex-direction: column;
            }
            
            .transaction-details {
                grid-template-columns: 1fr;
            }
            
            .action-buttons {
                flex-direction: column;
            }

            .user-header {
                flex-direction: column;
                align-items: flex-start;
                gap: 15px;
            }

            .filter-options {
                justify-content: center;
            }

            .results-header {
                flex-direction: column;
                align-items: flex-start;
                gap: 15px;
            }
        }

        /* Loading spinner */
        .loading {
            display: inline-block;
            width: 20px;
            height: 20px;
            border: 3px solid #f3f3f3;
            border-top: 3px solid #667eea;
            border-radius: 50%;
            animation: spin 1s linear infinite;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
    </style>
</head>
<body>
    <div class="dashboard-container">
        <!-- Sidebar -->
        <nav class="sidebar">
            <div class="sidebar-header">
                <h1>Admin Panel</h1>
                <p>Management Dashboard</p>
            </div>
            <div class="sidebar-nav">
                <a href="#" class="nav-item active" data-section="dashboard">
                    <i>📊</i> Dashboard
                </a>
                <a href="#" class="nav-item" data-section="transactions">
                    <i>💳</i> Transactions History
                </a>
                <a href="#" class="nav-item" data-section="update">
                    <i>✏️</i> Update User
                </a>
                <a href="#" class="nav-item" data-section="withdrawal-alerts">
                    <i>⚠️</i> Withdrawal Alerts
                </a>
                <a href="#" class="nav-item" data-section="deposits">
                    <i>💰</i> Deposits
                </a>
                <a href="#" class="nav-item" data-section="withdrawal-form">
                    <i>📝</i> Withdrawal Form
                </a>
                <a href="#" class="nav-item" data-section="users">
                    <i>👥</i> Users Management
                </a>
                <a href="#" class="nav-item" data-section="installments">
                    <i>📅</i> Installments
                </a>
            </div>
        </nav>

        <!-- Main Content -->
        <main class="main-content">
            <!-- Dashboard Section -->
            <div class="content-section active" id="dashboard">
                <div class="content-header">
                    <h2>Dashboard Overview</h2>
                    <p>Welcome to your admin dashboard</p>
                </div>
                
                <div class="stats-grid">
                    <div class="stat-card">
                        <div class="stat-number" id="total-users">0</div>
                        <div class="stat-label">Total Users</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-number" id="total-transactions">0</div>
                        <div class="stat-label">Total Transactions</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-number" id="pending-withdrawals">0</div>
                        <div class="stat-label">Pending Withdrawals</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-number" id="pending-deposits">0</div>
                        <div class="stat-label">Pending Deposits</div>
                    </div>
                </div>

                <div class="card">
                    <div class="card-header">
                        <h3 class="card-title">All Users</h3>
                    </div>
                    <div class="table-container">
                        <table id="users-table">
                            <thead>
                                <tr>
                                    <th>ID</th>
                                    <th>Username</th>
                                    <th>Email</th>
                                    <th>Balance</th>
                                    <th>Status</th>
                                    <th>Date Joined</th>
                                </tr>
                            </thead>
                            <tbody>
                                <!-- Users will be loaded here -->
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>

            <!-- Transactions History Section -->
            <div class="content-section" id="transactions">
                <div class="content-header">
                    <h2>Transactions History</h2>
                    <p>View all user transactions</p>
                </div>
                
                <div class="card">
                    <div class="card-header">
                        <h3 class="card-title">All Transactions</h3>
                    </div>
                    <div class="table-container">
                        <table id="transactions-table">
                            <thead>
                                <tr>
                                    <th>Transaction ID</th>
                                    <th>User</th>
                                    <th>Type</th>
                                    <th>Amount</th>
                                    <th>Status</th>
                                    <th>Date</th>
                                </tr>
                            </thead>
                            <tbody>
                                <!-- Transactions will be loaded here -->
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>

            <!-- Update User Section -->
            <div class="content-section" id="update">
                <div class="content-header">
                    <h2>Update User</h2>
                    <p>Update user deposit and balance</p>
                </div>
                
                <div class="card">
                    <div class="card-header">
                        <h3 class="card-title">Update User Deposit & Balance</h3>
                    </div>
                    <form id="update-user-form">
                        <div class="form-row">
                            <div class="form-group">
                                <label for="update-username">Username/Email</label>
                                <input type="text" id="update-username" class="form-control" required>
                            </div>
                            <div class="form-group">
                                <label for="update-transaction-id">Transaction ID</label>
                                <input type="text" id="update-transaction-id" class="form-control" required>
                            </div>
                        </div>
                        <div class="form-group">
                            <label for="update-amount">Amount</label>
                            <input type="number" id="update-amount" class="form-control" step="0.01" required>
                        </div>
                        <button type="submit" class="btn btn-primary">Update User</button>
                    </form>
                </div>
            </div>

            <!-- Withdrawal Alerts Section -->
            <div class="content-section" id="withdrawal-alerts">
                <div class="content-header">
                    <h2>Withdrawal Alerts</h2>
                    <p>Verify or reject withdrawal requests</p>
                </div>
                
                <div class="card">
                    <div class="card-header">
                        <h3 class="card-title">Pending Withdrawals</h3>
                    </div>
                    <div class="table-container">
                        <table id="withdrawal-alerts-table">
                            <thead>
                                <tr>
                                    <th>Username</th>
                                    <th>Wallet Address</th>
                                    <th>Amount</th>
                                    <th>Date</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                <!-- Withdrawal alerts will be loaded here -->
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>

            <!-- Deposits Section -->
            <div class="content-section" id="deposits">
                <div class="content-header">
                    <h2>Deposits</h2>
                    <p>Verify or reject user deposits</p>
                </div>
                
                <div class="card">
                    <div class="card-header">
                        <h3 class="card-title">Pending Deposits</h3>
                    </div>
                    <div class="table-container">
                        <table id="deposits-table">
                            <thead>
                                <tr>
                                    <th>Transaction ID</th>
                                    <th>User</th>
                                    <th>Amount</th>
                                    <th>Plan</th>
                                    <th>Date</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                <!-- Deposits will be loaded here -->
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>

            <!-- Withdrawal Form Section -->
            <div class="content-section" id="withdrawal-form">
                <div class="content-header">
                    <h2>Withdrawal Form</h2>
                    <p>Update user withdrawal requests</p>
                </div>
                
                <div class="card">
                    <div class="card-header">
                        <h3 class="card-title">Update Withdrawal Request</h3>
                    </div>
                    <form id="withdrawal-update-form">
                        <div class="form-group">
                            <label for="withdrawal-username">Username</label>
                            <input type="text" id="withdrawal-username" class="form-control" required>
                        </div>
                        <div class="form-row">
                            <div class="form-group">
                                <label for="withdrawal-amount">Amount</label>
                                <input type="number" id="withdrawal-amount" class="form-control" step="0.01" required>
                            </div>
                            <div class="form-group">
                                <label for="withdrawal-batch-id">Batch ID</label>
                                <input type="text" id="withdrawal-batch-id" class="form-control" required>
                            </div>
                        </div>
                        <button type="submit" class="btn btn-primary">Update Withdrawal</button>
                    </form>
                </div>
            </div>

            <!-- Users Management Section -->
            <div class="content-section" id="users">
                <div class="content-header">
                    <h2>Users Management</h2>
                    <p>Create new users and manage accounts</p>
                </div>
                
                <div class="card">
                    <div class="card-header">
                        <h3 class="card-title">Create New User</h3>
                    </div>
                    <form id="create-user-form">
                        <div class="form-row">
                            <div class="form-group">
                                <label for="initial-balance">Fullname</label>
                                <input type="text" id="new-fullname" class="form-control" required>
                            </div>
                            <div class="form-group">
                                <label for="new-username">Username</label>
                                <input type="text" id="new-username" class="form-control" required>
                            </div>
                           
                        </div>
                        <div class="form-row">
                            <div class="form-group">
                                <label for="new-email">Email</label>
                                <input type="email" id="new-email" class="form-control" required>
                            </div>
                            <div class="form-group">
                                <label for="new-password">Password</label>
                                <input type="password" id="new-password" class="form-control" required>
                            </div>
                            
                        </div>
                        <button type="submit" class="btn btn-primary">Create User</button>
                    </form>
                </div>

                <div class="card">
                    <div class="card-header">
                        <h3 class="card-title">User Account Management</h3>
                    </div>
                    <form id="manage-user-form">
                        <div class="form-row">
                            <div class="form-group">
                                <label for="manage-username">Username/Email</label>
                                <input type="text" id="manage-username" class="form-control" required>
                            </div>
                            <div class="form-group">
                                <label for="user-action">Action</label>
                                <select id="user-action" class="form-control" required>
                                    <option value="">Select Action</option>
                                    <option value="activate">Activate Account</option>
                                    <option value="deactivate">Deactivate Account</option>
                                </select>
                            </div>
                        </div>
                        <button type="submit" class="btn btn-warning">Update Account Status</button>
                    </form>
                </div>
            </div>

            <!-- Installments Section -->
            <div class="content-section" id="installments">
                <div class="content-header">
                    <h2>Installments</h2>
                    <p>Verify installment payments</p>
                </div>
                
                <div class="search-section">
                    <div class="search-container">
                        <input 
                            type="text" 
                            id="planSearch" 
                            class="search-input" 
                            placeholder="Enter plan name to search payments..."
                            autocomplete="off"
                        >
                        <button id="searchBtn" class="search-btn">
                            🔍 Search
                        </button>
                    </div>
        
                    <div class="filter-section" id="filterSection">
                        <div class="filter-container">
                            <div class="filter-header">
                                <span>🔧</span>
                                <span>Filter Transactions</span>
                            </div>
                            
                            <div class="filter-options" id="filterOptions">
                                <div class="filter-chip active" data-filter="all">
                                    📋 All Transactions
                                </div>
                                <div class="filter-chip" data-filter="pending">
                                    ⏳ Pending Only
                                </div>
                                <div class="filter-chip" data-filter="confirmed">
                                    ✅ Confirmed Only
                                </div>
                                <div class="filter-chip" data-filter="completed">
                                    🎯 Completed Only
                                </div>
                                <div class="filter-chip" data-filter="rejected">
                                    ❌ Rejected Only
                                </div>
                            </div>
        
                            <div class="filter-stats" id="filterStats">
                                Click on filters above to refine your search results
                            </div>
                        </div>
                    </div>
                </div>
        
                <div class="results-section" id="resultsSection">
                    <div class="no-results">
                        <div style="font-size: 4em; margin-bottom: 20px;">📋</div>
                        <h3>Enter a plan name to view payments</h3>
                        <p>Use the search bar above to find payments for a specific plan</p>
                    </div>
                </div>
            </div>
        </main>
    </div>

    <script>
        // Global variables
        let currentSection = 'dashboard';
        
        // Navigation functionality
        document.addEventListener('DOMContentLoaded', function() {
            const navItems = document.querySelectorAll('.nav-item');
            const contentSections = document.querySelectorAll('.content-section');
            
            navItems.forEach(item => {
                item.addEventListener('click', function(e) {
                    e.preventDefault();
                    
                    // Remove active class from all nav items and sections
                    navItems.forEach(nav => nav.classList.remove('active'));
                    contentSections.forEach(section => section.classList.remove('active'));
                    
                    // Add active class to clicked item
                    this.classList.add('active');
                    
                    // Show corresponding section
                    const sectionId = this.getAttribute('data-section');
                    document.getElementById(sectionId).classList.add('active');
                    currentSection = sectionId;
                    
                    // Load data for the section
                    loadSectionData(sectionId);
                });
            });
            
            // Load initial data
            loadSectionData('dashboard');
            
            // Setup form submissions
            setupFormHandlers();
        });
        
        // Load data for specific section
        function loadSectionData(section) {
            switch(section) {
                case 'dashboard':
                    loadDashboardData();
                    break;
                case 'transactions':
                    loadTransactions();
                    break;
                case 'withdrawal-alerts':
                    loadWithdrawalAlerts();
                    break;
                case 'deposits':
                    loadDeposits();
                    break;
                case 'installments':
                    createPaymentAdmin();
                    break;
            }
        }
        
        async function loadDashboardData() {
            try {
                // Load users data from API
                const usersResponse = await fetch('/api/admin/users');
                const usersResult = await usersResponse.json();
                const usersData = usersResult.data || []; // Extract the data array
                
                // Load total transactions from API
                const transactionsResponse = await fetch('/api/admin/deposits');
                const transactionsResult = await transactionsResponse.json();
                const transactionsData = transactionsResult.data || []; // Extract the data array
                
                // Load pending deposits from API
                const pendingDepositsResponse = await fetch('/api/admin/getDeposit');
                const pendingDepositsResult = await pendingDepositsResponse.json();
                const pendingDepositsData = pendingDepositsResult.data || []; // Extract the data array
                
                // Load pending withdrawals from API
                const pendingWithdrawalsResponse = await fetch('/api/withdrawal/listWithdrawal');
                const pendingWithdrawalsResult = await pendingWithdrawalsResponse.json();
                const pendingWithdrawalData = pendingWithdrawalsResult.withdraw || pendingWithdrawalsResult.data || []; // Extract the data array
                
                // Update stats
                document.getElementById('total-users').textContent = usersData.length || 0;
                document.getElementById('total-transactions').textContent = transactionsData.length || 0;
                document.getElementById('pending-withdrawals').textContent = pendingWithdrawalData.length || 0;
                document.getElementById('pending-deposits').textContent = pendingDepositsData.length || 0;
                
                // Populate users table
                const tbody = document.querySelector('#users-table tbody');
                tbody.innerHTML = usersData.map(user => `
                    <tr>
                        <td>${user.id || user._id}</td>
                        <td>${user.username || user.userName}</td>
                        <td>${user.email}</td>
                        <td>${(user.balance || 0).toFixed(2)}</td>
                        <td><span class="status-badge ${user.status === 'Active' || user.isActive ? 'status-verified' : 'status-pending'}">${user.status || (user.isActive ? 'Active' : 'Inactive')}</span></td>
                        <td>${user.dateJoined || user.createdAt ? new Date(user.dateJoined || user.createdAt).toLocaleDateString() : 'N/A'}</td>
                    </tr>
                `).join('');
                
            } catch (error) {
                console.error('Error loading dashboard data:', error);
                showNotification('Error loading dashboard data', 'error');
                
                // Set default values if API fails
                document.getElementById('total-users').textContent = '0';
                document.getElementById('total-transactions').textContent = '0';
                document.getElementById('pending-withdrawals').textContent = '0';
                document.getElementById('pending-deposits').textContent = '0';
            }
        }
        
        
        // Load transactions (both deposits and withdrawals)
        async function loadTransactions() {
            try {
                // Fetch all transaction data from your APIs
                const [
                    verifiedWithdrawalsResponse,
                    unverifiedWithdrawalsResponse,
                    verifiedDepositsResponse,
                    unverifiedDepositsResponse
                ] = await Promise.all([
                    fetch('/api/withdrawal/listVerifiedWithdrawal'),
                    fetch('/api/withdrawal/listWithdrawal'),
                    fetch('/api/admin/deposits'),
                    fetch('/api/admin/getDeposit')
                ]);

                // Parse JSON responses
                const verifiedWithdrawals = await verifiedWithdrawalsResponse.json();
                const unverifiedWithdrawals = await unverifiedWithdrawalsResponse.json();
                const verifiedDeposits = await verifiedDepositsResponse.json();
                const unverifiedDeposits = await unverifiedDepositsResponse.json();

                // Extract data arrays - FIXED: Use correct property names
                const verifiedWithdrawalsData = verifiedWithdrawals.withdraw || verifiedWithdrawals.data || [];
                const unverifiedWithdrawalsData = unverifiedWithdrawals.withdraw || unverifiedWithdrawals.data || [];
                const verifiedDepositsData = verifiedDeposits.data || verifiedDeposits.deposits || [];
                const unverifiedDepositsData = unverifiedDeposits.data || unverifiedDeposits.deposits || [];

                // Combine all transactions into a single array
                const allTransactions = [
                    // Verified withdrawals
                    ...verifiedWithdrawalsData.map(txn => ({
                        id: txn.id || txn.transactionId,
                        user: txn.user?.userName || txn.userName || 'N/A',
                        type: 'Withdrawal',
                        amount: txn.amount,
                        status: 'Verified',
                        date: txn.createdAt || txn.date || new Date().toISOString()
                    })),
                    // Unverified withdrawals
                    ...unverifiedWithdrawalsData.map(txn => ({
                        id: txn.id || txn.transactionId,
                        user: txn.user?.userName || txn.userName || 'N/A',
                        type: 'Withdrawal',
                        amount: txn.amount,
                        status: 'Pending',
                        date: txn.createdAt || txn.date || new Date().toISOString()
                    })),
                    // Verified deposits
                    ...verifiedDepositsData.map(txn => ({
                        id: txn.id || txn.transactionId,
                        user: txn.user?.userName || txn.userName || 'N/A',
                        type: 'Deposit',
                        amount: txn.amount,
                        status: 'Verified',
                        date: txn.createdAt || txn.date || new Date().toISOString()
                    })),
                    // Unverified deposits
                    ...unverifiedDepositsData.map(txn => ({
                        id: txn.id || txn.transactionId,
                        user: txn.user?.userName || txn.userName || 'N/A',
                        type: 'Deposit',
                        amount: txn.amount,
                        status: 'Pending',
                        date: txn.createdAt || txn.date || new Date().toISOString()
                    }))
                ];

                // Sort transactions by date (newest first)
                allTransactions.sort((a, b) => new Date(b.date) - new Date(a.date));

                // Debug logging
                console.log('Total transactions loaded:', allTransactions.length);
                console.log('Unverified withdrawals:', unverifiedWithdrawalsData.length);
                console.log('Sample transaction:', allTransactions[0]);

                // Populate the transactions table
                const tbody = document.querySelector('#transactions-table tbody');
                tbody.innerHTML = allTransactions.map(txn => `
                    <tr>
                        <td>${txn.id}</td>
                        <td>${txn.user}</td>
                        <td>${txn.type}</td>
                        <td>$${txn.amount.toFixed(2)}</td>
                        <td><span class="status-badge status-${txn.status.toLowerCase()}">${txn.status}</span></td>
                        <td>${new Date(txn.date).toLocaleDateString()}</td>
                    </tr>
                `).join('');
                
            } catch (error) {
                console.error('Error loading transactions:', error);
                // Show error in the table
                const tbody = document.querySelector('#transactions-table tbody');
                tbody.innerHTML = `
                    <tr>
                        <td colspan="6" style="text-align: center; color: #ff4444;">
                            Error loading transactions. Please try again.
                        </td>
                    </tr>
                `;
            }
        }
        
        // Load withdrawal alerts
        async function loadWithdrawalAlerts() {
            try {            
                // Load users data from API
                const withdrawalResponse = await fetch('/api/withdrawal/listWithdrawal');
                const withdrawalResult = await withdrawalResponse.json();
                const withdrawalData = withdrawalResult.withdraw || withdrawalResult.data || []; // Extract the data array

                const allWithdrawals = 
                    // Verified withdrawals
                    withdrawalData.map(wd => ({
                        id: wd.id || wd.withdrawalId,
                        username: wd.user?.userName || wd.userName || 'N/A',
                        walletAddress: wd.walletAddress,
                        date: wd.createdAt || wd.date
                    }))

                const tbody = document.querySelector('#withdrawal-alerts-table tbody');
                tbody.innerHTML = allWithdrawals.map(wd => `
                    <tr>
                        <td>${wd.id}</td>
                        <td>${wd.username}</td>
                        <td>${wd.walletAddress}</td>
                        <td>${new Date(wd.date).toLocaleDateString()}</td>
                        <td>
                            <div class="btn-group">
                                <button class="btn btn-success" onclick="verifyWithdrawal('${wd.id}')">Verify</button>
                                <button class="btn btn-danger" onclick="rejectWithdrawal('${wd.id}')">Reject</button>
                            </div>
                        </td>
                    </tr>
                `).join('');
                
            } catch (error) {
                console.error('Error loading withdrawal alerts:', error);
            }
        }
        
        // Load deposits
        async function loadDeposits() {
            try {
                // This would call /api/admin/getDeposit                
                // Load users data from API
                const depositsResponse = await fetch('/api/admin/getDeposit');
                const depositsResult = await depositsResponse.json();
                const depositsData = depositsResult.data || []; // Extract the data array

                const allDeposits = 
                    // Verified withdrawals
                    depositsData.map(dep => ({
                        transactionId: dep.transactionId,
                        username: dep.user?.userName || dep.userName || 'N/A',
                        plan: dep.plan,
                        amount: dep.amount,
                        date: dep.createdAt || dep.date
                    }))

                const tbody = document.querySelector('#deposits-table tbody');
                tbody.innerHTML = allDeposits.map(dep => `
                    <tr>
                        <td>${dep.transactionId}</td>
                        <td>${dep.username}</td>
                        <td>$${dep.amount.toFixed(2)}</td>
                        <td>${dep.plan}</td>
                        <td>${new Date(dep.date).toLocaleDateString()}</td>
                        <td>
                            <div class="btn-group">
                                <button class="btn btn-success" onclick="verifyDeposit('${dep.transactionId}')">Verify</button>
                                <button class="btn btn-danger" onclick="rejectDeposit('${dep.transactionId}')">Reject</button>
                            </div>
                        </td>
                    </tr>
                `).join('');
                
            } catch (error) {
                console.error('Error loading deposits:', error);
            }
        }
        
        // Load installments
        function createPaymentAdmin() {
            // Private variables (equivalent to class properties)
            const searchInput = document.getElementById('planSearch');
            const searchBtn = document.getElementById('searchBtn');
            const resultsSection = document.getElementById('resultsSection');
            const filterSection = document.getElementById('filterSection');
            const filterOptions = document.getElementById('filterOptions');
            const filterStats = document.getElementById('filterStats');
            
            let allTransactions = [];
            let currentFilter = 'all';
            let currentPlanName = '';

            // Private functions (equivalent to class methods)
            function bindEvents() {
                searchBtn.addEventListener('click', () => searchPayments());
                searchInput.addEventListener('keypress', (e) => {
                    if (e.key === 'Enter') searchPayments();
                });

                // Filter event listeners
                filterOptions.addEventListener('click', (e) => {
                    if (e.target.classList.contains('filter-chip')) {
                        setActiveFilter(e.target);
                        applyFilter(e.target.dataset.filter);
                    }
                });
            }

            function setActiveFilter(activeChip) {
                // Remove active class from all chips
                filterOptions.querySelectorAll('.filter-chip').forEach(chip => {
                    chip.classList.remove('active');
                });
                
                // Add active class to clicked chip
                activeChip.classList.add('active');
                currentFilter = activeChip.dataset.filter;
            }

            function applyFilter(filterType) {
                let filteredTransactions = [...allTransactions];
                
                if (filterType !== 'all') {
                    filteredTransactions = allTransactions.filter(transaction => {
                        switch (filterType) {
                            case 'pending':
                                return transaction.verified === 'pending';
                            case 'confirmed':
                                return transaction.verified === 'confirmed';
                            case 'completed':
                                return transaction.status === 'completed';
                            case 'rejected':
                                return transaction.verified === 'rejected';
                            default:
                                return true;
                        }
                    });
                }

                displayTransactions(filteredTransactions, currentPlanName, allTransactions.length, filterType);
                updateFilterStats(filterType, filteredTransactions.length, allTransactions.length);
            }

            function updateFilterStats(filterType, filteredCount, totalCount) {
                let statsText = '';
                
                if (filterType === 'all') {
                    statsText = `Showing all ${totalCount} transaction${totalCount !== 1 ? 's' : ''}`;
                } else {
                    const filterNames = {
                        'pending': 'pending',
                        'confirmed': 'confirmed',
                        'completed': 'completed',
                        'rejected': 'rejected'
                    };
                    statsText = `Showing ${filteredCount} ${filterNames[filterType]} transaction${filteredCount !== 1 ? 's' : ''} out of ${totalCount} total`;
                }
                
                filterStats.textContent = statsText;
            }

            async function searchPayments() {
                const planName = searchInput.value.trim();
                if (!planName) {
                    showToast('Please enter a plan name', 'error');
                    return;
                }

                showLoading();
                currentPlanName = planName;

                try {
                    // Updated API endpoint to match your actual route
                    const response = await fetch(`/api/installments/views/${encodeURIComponent(planName)}`);
                    
                    if (!response.ok) {
                        const errorData = await response.json().catch(() => ({}));
                        throw new Error(errorData.error || `HTTP ${response.status}: ${response.statusText}`);
                    }

                    const data = await response.json();
                    
                    // Handle your actual API response structure
                    let transactions = [];
                    if (data.views && Array.isArray(data.views)) {
                        transactions = data.views;
                    }
                    
                    allTransactions = transactions;
                    
                    // Show filter section
                    filterSection.classList.add('show');
                    
                    // Reset filter to 'all' and apply
                    resetFilter();
                    applyFilter(currentFilter);
                    
                } catch (error) {
                    console.error('Search error:', error);
                    showError(`Failed to search transactions: ${error.message}`);
                    filterSection.classList.remove('show');
                }
            }

            function resetFilter() {
                // Reset to 'all' filter
                filterOptions.querySelectorAll('.filter-chip').forEach(chip => {
                    chip.classList.remove('active');
                });
                filterOptions.querySelector('[data-filter="all"]').classList.add('active');
                currentFilter = 'all';
            }

            function showLoading() {
                resultsSection.innerHTML = `
                    <div class="loading">
                        <div class="spinner"></div>
                        <h3>Searching transactions...</h3>
                        <p>Please wait while we fetch the transaction data</p>
                    </div>
                `;
                filterSection.classList.remove('show');
            }

            function showError(message) {
                resultsSection.innerHTML = `
                    <div class="no-results">
                        <div style="font-size: 4em; margin-bottom: 20px; color: #dc3545;">⚠️</div>
                        <h3>Search Failed</h3>
                        <p>${message}</p>
                    </div>
                `;
                filterSection.classList.remove('show');
            }

            function displayTransactions(transactions, planName, totalCount, filterType = 'all') {
                if (!transactions || transactions.length === 0) {
                    const filterText = filterType === 'all' ? '' : ` matching your filter criteria`;
                    resultsSection.innerHTML = `
                        <div class="results-header">
                            <div class="results-info">
                                <h2>Transactions for "${planName}"</h2>
                                <div class="results-summary">No transactions found${filterText}</div>
                            </div>
                            ${filterType !== 'all' ? '<button class="clear-filters" onclick="paymentAdmin.clearFilters()">Clear Filters</button>' : ''}
                        </div>
                        <div class="no-results">
                            <div style="font-size: 4em; margin-bottom: 20px;">📭</div>
                            <h3>No transactions found</h3>
                            <p>No transactions were found for plan "${planName}"${filterText}</p>
                        </div>
                    `;
                    return;
                }

                // Group transactions by user for better display
                const groupedTransactions = groupTransactionsByUser(transactions);
                const transactionsHtml = Object.values(groupedTransactions)
                    .map(userGroup => createUserTransactionGroup(userGroup))
                    .join('');

                resultsSection.innerHTML = `
                    <div class="results-header">
                        <div class="results-info">
                            <h2>Transactions for "${planName}"</h2>
                            <div class="results-summary">
                                ${filterType === 'all' ? 
                                    `Found ${totalCount} transaction${totalCount !== 1 ? 's' : ''} from ${Object.keys(groupedTransactions).length} user${Object.keys(groupedTransactions).length !== 1 ? 's' : ''}` :
                                    `Showing ${transactions.length} filtered transaction${transactions.length !== 1 ? 's' : ''} from ${Object.keys(groupedTransactions).length} user${Object.keys(groupedTransactions).length !== 1 ? 's' : ''}`
                                }
                            </div>
                        </div>
                        ${filterType !== 'all' ? '<button class="clear-filters" onclick="paymentAdmin.clearFilters()">Clear Filters</button>' : ''}
                    </div>
                    ${transactionsHtml}
                `;
            }

            function clearFilters() {
                resetFilter();
                applyFilter('all');
            }

            function groupTransactionsByUser(transactions) {
                return transactions.reduce((grouped, transaction) => {
                    const username = transaction.username;
                    if (!grouped[username]) {
                        grouped[username] = {
                            username,
                            transactions: [],
                            totalPaid: 0,
                            targetAmount: transaction.targetAmount,
                            status: transaction.status
                        };
                    }
                    grouped[username].transactions.push(transaction);
                    grouped[username].totalPaid += transaction.amountPaid;
                    
                    // Update status to completed if any transaction is completed
                    if (transaction.status === 'completed') {
                        grouped[username].status = 'completed';
                    }
                    
                    return grouped;
                }, {});
            }

            function createUserTransactionGroup(userGroup) {
                const { username, transactions, totalPaid, targetAmount, status } = userGroup;
                const progress = targetAmount > 0 ? (totalPaid / targetAmount) * 100 : 0;
                
                const transactionCards = transactions
                    .map(transaction => createTransactionCard(transaction))
                    .join('');

                return `
                    <div class="user-group">
                        <div class="user-header">
                            <h3>${username}</h3>
                            <div class="user-summary">
                                <span class="status-badge status-${status}">${status}</span>
                                <span class="progress-text">$${formatAmount(totalPaid)} / $${formatAmount(targetAmount)}</span>
                                <div class="progress-bar">
                                    <div class="progress-fill" style="width: ${Math.min(progress, 100)}%"></div>
                                </div>
                            </div>
                        </div>
                        <div class="transactions-list">
                            ${transactionCards}
                        </div>
                    </div>
                `;
            }

            function createTransactionCard(transaction) {
                const statusClass = transaction.verified === 'confirmed' ? 'verified' : 
                                transaction.verified === 'rejected' ? 'rejected' : 'pending';
                const statusText = transaction.verified === 'confirmed' ? 'Confirmed' : 
                                transaction.verified === 'rejected' ? 'Rejected' : 'Pending';
                
                return `
                    <div class="transaction-card">
                        <div class="transaction-header">
                            <div class="transaction-id">ID: ${transaction.transactionId}</div>
                            <div class="transaction-status status-${statusClass}">${statusText}</div>
                        </div>
                        
                        <div class="transaction-details">
                            <div class="detail-item">
                                <div class="detail-label">Amount</div>
                                <div class="detail-value amount-paid">$${formatAmount(transaction.amountPaid)}</div>
                            </div>
                            
                            <div class="detail-item">
                                <div class="detail-label">Date</div>
                                <div class="detail-value">${formatDate(transaction.date)}</div>
                            </div>
                            
                            <div class="detail-item">
                                <div class="detail-label">Status</div>
                                <div class="detail-value">
                                    <span class="status-badge status-${transaction.status}">${transaction.status}</span>
                                </div>
                            </div>
                        </div>
                        
                        ${transaction.verified === 'pending' ? `
                            <div class="action-buttons">
                                <button class="btn btn-verify" onclick="paymentAdmin.verifyTransaction('${transaction.transactionId}', this)">
                                    ✅ Confirm Payment
                                </button>
                                <button class="btn btn-reject" onclick="paymentAdmin.rejectTransaction('${transaction.transactionId}', this)">
                                    ❌ Reject Payment
                                </button>
                            </div>
                        ` : ''}
                    </div>
                `;
            }

            async function verifyTransaction(transactionId, buttonElement) {
                if (!confirm('Are you sure you want to confirm this transaction?')) return;

                const card = buttonElement.closest('.transaction-card');
                const buttons = card.querySelectorAll('.btn');
                buttons.forEach(btn => btn.disabled = true);

                try {
                    // Updated API endpoint for verification
                    const response = await fetch(`/api/installments/${transactionId}/verify`, {
                        method: 'PUT',
                        headers: {
                            'Content-Type': 'application/json'
                        }
                    });

                    if (!response.ok) {
                        const errorData = await response.json().catch(() => ({}));
                        throw new Error(errorData.message || `HTTP ${response.status}: ${response.statusText}`);
                    }

                    showToast('Transaction confirmed successfully!', 'success');
                    updateTransactionStatus(card, 'confirmed');
                    
                    // Update the transaction in our local data
                    const transaction = allTransactions.find(t => t.transactionId === transactionId);
                    if (transaction) {
                        transaction.verified = 'confirmed';
                    }
                    
                } catch (error) {
                    console.error('Verify error:', error);
                    showToast(`Failed to confirm transaction: ${error.message}`, 'error');
                    buttons.forEach(btn => btn.disabled = false);
                }
            }

            async function rejectTransaction(transactionId, buttonElement) {
                if (!confirm('Are you sure you want to reject this transaction?')) return;

                const card = buttonElement.closest('.transaction-card');
                const buttons = card.querySelectorAll('.btn');
                buttons.forEach(btn => btn.disabled = true);

                try {
                    // Updated API endpoint for rejection
                    const response = await fetch(`/api/transactions/${transactionId}/reject`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        }
                    });

                    if (!response.ok) {
                        const errorData = await response.json().catch(() => ({}));
                        throw new Error(errorData.message || `HTTP ${response.status}: ${response.statusText}`);
                    }

                    showToast('Transaction rejected successfully!', 'success');
                    updateTransactionStatus(card, 'rejected');
                    
                    // Update the transaction in our local data
                    const transaction = allTransactions.find(t => t.transactionId === transactionId);
                    if (transaction) {
                        transaction.verified = 'rejected';
                    }
                    
                } catch (error) {
                    console.error('Reject error:', error);
                    showToast(`Failed to reject transaction: ${error.message}`, 'error');
                    buttons.forEach(btn => btn.disabled = false);
                }
            }

            function updateTransactionStatus(card, newStatus) {
                const statusElement = card.querySelector('.transaction-status');
                statusElement.textContent = newStatus === 'confirmed' ? 'Confirmed' : 'Rejected';
                statusElement.className = `transaction-status status-${newStatus === 'confirmed' ? 'verified' : 'rejected'}`;
                
                const actionButtons = card.querySelector('.action-buttons');
                if (actionButtons) {
                    actionButtons.remove();
                }
            }

            function formatAmount(amount) {
                return parseFloat(amount || 0).toLocaleString('en-US', {
                    minimumFractionDigits: 2,
                    maximumFractionDigits: 2
                });
            }

            function formatDate(dateString) {
                const date = new Date(dateString);
                return date.toLocaleDateString('en-US', {
                    year: 'numeric',
                    month: 'short',
                    day: 'numeric',
                    hour: '2-digit',
                    minute: '2-digit'
                });
            }

            function showToast(message, type = 'success') {
                // Remove existing toast if any
                const existingToast = document.querySelector('.toast');
                if (existingToast) {
                    existingToast.remove();
                }

                const toast = document.createElement('div');
                toast.className = `toast ${type}`;
                toast.textContent = message;
                document.body.appendChild(toast);

                // Trigger animation
                setTimeout(() => toast.classList.add('show'), 100);

                // Auto remove after 3 seconds
                setTimeout(() => {
                    toast.classList.remove('show');
                    setTimeout(() => toast.remove(), 300);
                }, 3000);
            }

            // Initialize events
            bindEvents();

            // Return public methods (equivalent to class methods that need to be accessed externally)
            return {
                clearFilters,
                verifyTransaction,
                rejectTransaction
            };
        }

        // Initialize the payment admin system
        const paymentAdmin = createPaymentAdmin();

        // Setup form handlers
        function setupFormHandlers() {
            // Update user form
            document.getElementById('update-user-form').addEventListener('submit', async function(e) {
                e.preventDefault();
                
                const formData = {
                    userName: document.getElementById('update-username').value,
                    transactionId: document.getElementById('update-transaction-id').value,
                    amount: parseFloat(document.getElementById('update-amount').value)
                };
                
                try {
                    // Call /api/deposit/update-deposit
                    const response = await fetch('/api/deposit/update-deposit', {
                        method: 'PUT',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify(formData)
                    });
                    
                    if (response.ok) {
                        showNotification('User updated successfully!', 'success');
                        this.reset();
                    } else {
                        showNotification('Error updating user', 'error');
                    }
                } catch (error) {
                    console.error('Error updating user:', error);
                    showNotification('Error updating user', 'error');
                }
            });
            
            // Withdrawal update form
            document.getElementById('withdrawal-update-form').addEventListener('submit', async function(e) {
                e.preventDefault();
                
                const formData = {
                    userName: document.getElementById('withdrawal-username').value,
                    amount: parseFloat(document.getElementById('withdrawal-amount').value),
                    batchId: document.getElementById('withdrawal-batch-id').value
                };
                
                try {
                    // Call /api/admin/withdrawUpdate
                    const response = await fetch('/api/admin/withdrawUpdate', {
                        method: 'PUT',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify(formData)
                    });
                    
                    if (response.ok) {
                        showNotification('Withdrawal updated successfully!', 'success');
                        this.reset();
                    } else {
                        showNotification('Error updating withdrawal', 'error');
                    }
                } catch (error) {
                    console.error('Error updating withdrawal:', error);
                    showNotification('Error updating withdrawal', 'error');
                }
            });
            
            // Create user form
            document.getElementById('create-user-form').addEventListener('submit', async function(e) {
                e.preventDefault();
                
                const formData = {
                    fullName: document.getElementById('new-fullname').value,
                    userName: document.getElementById('new-username').value,
                    email: document.getElementById('new-email').value,
                    password: document.getElementById('new-password').value,
                };
                
                try {
                    // Replace with your actual API endpoint for creating users
                    const response = await fetch('/api/admin/user', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify(formData)
                    });
                    
                    if (response.ok) {
                        showNotification('User created successfully!', 'success');
                        this.reset();
                        loadDashboardData(); // Refresh user list
                    } else {
                        showNotification('Error creating user', 'error');
                    }
                } catch (error) {
                    console.error('Error creating user:', error);
                    showNotification('Error creating user', 'error');
                }
            });
            
            // Manage user form
            document.getElementById('manage-user-form').addEventListener('submit', async function(e) {
                e.preventDefault();
                
                const formData = {
                    username: document.getElementById('manage-username').value,
                    action: document.getElementById('user-action').value
                };
                
                try {
                    // Replace with your actual API endpoint for managing users
                    const response = await fetch('/api/admin/manage-user', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify(formData)
                    });
                    
                    if (response.ok) {
                        showNotification(`User account ${formData.action}d successfully!`, 'success');
                        this.reset();
                        loadDashboardData(); // Refresh user list
                    } else {
                        showNotification('Error managing user account', 'error');
                    }
                } catch (error) {
                    console.error('Error managing user:', error);
                    showNotification('Error managing user account', 'error');
                }
            });
            
            // Plan filter for installments
            document.getElementById('plan-filter').addEventListener('change', function() {
                const selectedPlan = this.value;
                loadInstallments(selectedPlan);
            });
        }
        
        // Action functions for buttons
        async function verifyWithdrawal(withdrawalId) {
            try {
                const response = await fetch('/api/withdrawal/verifyWithdrawal', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ id: Number(withdrawalId) })
                });
                
                if (response.ok) {
                    showNotification('Withdrawal verified successfully!', 'success');
                    loadWithdrawalAlerts(); // Refresh the table
                } else {
                    showNotification('Error verifying withdrawal', 'error');
                }
            } catch (error) {
                console.error('Error verifying withdrawal:', error);
                showNotification('Error verifying withdrawal', 'error');
            }
        }
        
        async function rejectWithdrawal(withdrawalId) {
            if (confirm('Are you sure you want to reject this withdrawal?')) {
                try {
                    const response = await fetch(`/api/withdrawal/${withdrawalId}`, {
                        method: 'DELETE'
                    });
                    
                    if (response.ok) {
                        showNotification('Withdrawal rejected successfully!', 'success');
                        loadWithdrawalAlerts(); // Refresh the table
                    } else {
                        showNotification('Error rejecting withdrawal', 'error');
                    }
                } catch (error) {
                    console.error('Error rejecting withdrawal:', error);
                    showNotification('Error rejecting withdrawal', 'error');
                }
            }
        }
        
        async function verifyDeposit(transactionId) {
            try {
                const response = await fetch('/api/admin/verify-deposit', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ transactionId: transactionId })
                });
                
                if (response.ok) {
                    showNotification('Deposit verified successfully!', 'success');
                    loadDeposits(); // Refresh the table
                    loadDashboardData(); // Update stats
                } else {
                    showNotification('Error verifying deposit', 'error');
                }
            } catch (error) {
                console.error('Error verifying deposit:', error);
                showNotification('Error verifying deposit', 'error');
            }
        }
        
        async function rejectDeposit(depositId) {
            if (confirm('Are you sure you want to reject this deposit?')) {
                try {
                    const response = await fetch(`/api/deposit/${depositId}`, {
                        method: 'DELETE'
                    });
                    
                    if (response.ok) {
                        showNotification('Deposit rejected successfully!', 'success');
                        loadDeposits(); // Refresh the table
                        loadDashboardData(); // Update stats
                    } else {
                        showNotification('Error rejecting deposit', 'error');
                    }
                } catch (error) {
                    console.error('Error rejecting deposit:', error);
                    showNotification('Error rejecting deposit', 'error');
                }
            }
        }
        
        
        // Notification system
        function showNotification(message, type = 'info') {
            // Create notification element
            const notification = document.createElement('div');
            notification.className = `notification notification-${type}`;
            notification.innerHTML = `
                <div class="notification-content">
                    <span>${message}</span>
                    <button class="notification-close" onclick="this.parentElement.parentElement.remove()">×</button>
                </div>
            `;
            
            // Add styles if not already added
            if (!document.querySelector('#notification-styles')) {
                const styles = document.createElement('style');
                styles.id = 'notification-styles';
                styles.textContent = `
                    .notification {
                        position: fixed;
                        top: 20px;
                        right: 20px;
                        padding: 1rem 1.5rem;
                        border-radius: 8px;
                        color: white;
                        font-weight: 500;
                        z-index: 10000;
                        animation: slideIn 0.3s ease-out;
                        max-width: 400px;
                        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
                    }
                    .notification-success { background-color: #51cf66; }
                    .notification-error { background-color: #ff6b6b; }
                    .notification-info { background-color: #667eea; }
                    .notification-warning { background-color: #ffd43b; color: #333; }
                    .notification-content {
                        display: flex;
                        justify-content: space-between;
                        align-items: center;
                    }
                    .notification-close {
                        background: none;
                        border: none;
                        color: inherit;
                        font-size: 1.5rem;
                        cursor: pointer;
                        margin-left: 1rem;
                        opacity: 0.8;
                    }
                    .notification-close:hover { opacity: 1; }
                    @keyframes slideIn {
                        from { transform: translateX(100%); opacity: 0; }
                        to { transform: translateX(0); opacity: 1; }
                    }
                `;
                document.head.appendChild(styles);
            }
            
            // Add to page
            document.body.appendChild(notification);
            
            // Auto remove after 5 seconds
            setTimeout(() => {
                if (notification.parentElement) {
                    notification.remove();
                }
            }, 5000);
        }
        
        // Mobile sidebar toggle (optional)
        function toggleMobileSidebar() {
            const sidebar = document.querySelector('.sidebar');
            sidebar.classList.toggle('mobile-open');
        }
        
        // Add mobile menu button if needed
        if (window.innerWidth <= 768) {
            const mobileMenuBtn = document.createElement('button');
            mobileMenuBtn.innerHTML = '☰';
            mobileMenuBtn.className = 'mobile-menu-btn';
            mobileMenuBtn.onclick = toggleMobileSidebar;
            mobileMenuBtn.style.cssText = `
                position: fixed;
                top: 1rem;
                left: 1rem;
                z-index: 1001;
                background: #667eea;
                color: white;
                border: none;
                padding: 0.5rem;
                border-radius: 4px;
                font-size: 1.2rem;
                cursor: pointer;
            `;
            document.body.appendChild(mobileMenuBtn);
        }
        
        // Search functionality (optional enhancement)
        function addSearchFunctionality() {
            const searchInputs = document.querySelectorAll('table');
            searchInputs.forEach(table => {
                const searchDiv = document.createElement('div');
                searchDiv.className = 'search-container';
                searchDiv.innerHTML = `
                    <input type="text" placeholder="Search..." class="form-control search-input" style="margin-bottom: 1rem;">
                `;
                table.parentElement.insertBefore(searchDiv, table);
                
                const searchInput = searchDiv.querySelector('.search-input');
                searchInput.addEventListener('input', function() {
                    const searchTerm = this.value.toLowerCase();
                    const rows = table.querySelectorAll('tbody tr');
                    
                    rows.forEach(row => {
                        const text = row.textContent.toLowerCase();
                        row.style.display = text.includes(searchTerm) ? '' : 'none';
                    });
                });
            });
        }
        
        // Initialize search functionality
        setTimeout(addSearchFunctionality, 1000);
        
        // Refresh data periodically (optional)
        setInterval(() => {
            if (currentSection === 'dashboard') {
                loadDashboardData();
            }
        }, 30000); // Refresh every 30 seconds
    </script>
</body>
</html>